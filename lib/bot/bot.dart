import 'dart:io';
import 'dart:math';

import 'package:flutter_battle/ai/ai.dart';
import 'package:flutter_battle/ai/bot_user.dart';
import 'package:flutter_battle/bot/init_game.dart';
import 'package:flutter_battle/entities.dart';
import 'package:flutter_battle/game.dart';

import 'package:flutter_battle/main.dart';
import 'package:flutter_battle/patchnote.dart';

import 'package:flutter_battle/team.dart';
import 'package:flutter_battle/turnmanager.dart';
import 'package:image/image.dart';

import 'package:nyxx/nyxx.dart';
import 'package:nyxx_interactions/nyxx_interactions.dart';
import 'package:path_provider/path_provider.dart';

void runBot(String token) {
  final bot =
      NyxxFactory.createNyxxWebsocket(token, GatewayIntents.allUnprivileged)
        ..registerPlugin(Logging()) // Default logging plugin
        ..registerPlugin(
            CliIntegration()) // Cli integration for nyxx allows stopping application via SIGTERM and SIGKILl
        ..registerPlugin(
            IgnoreExceptions()) // Plugin that handles uncaught exceptions that may occur
        ..connect();

  GameInitiator gameInitiator = GameInitiator();

  final squarebattleCommand = SlashCommandBuilder(
      "squarebattle", "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –≤ Squarebattle", [
    CommandOptionBuilder(CommandOptionType.number, '-b', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤')
  ])
    ..registerHandler(
        (event) async => await handleSquarebattleCommand(event, gameInitiator));

  final startCommand =
      SlashCommandBuilder("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∏–≥—Ä—É", [])
        ..registerHandler(
            (event) async => await handleStartCommand(event, gameInitiator));

  final skipCommand =
      SlashCommandBuilder("skip", "–ó–∞—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥", [])
        ..registerHandler(
            (event) async => await handleSkipCommand(event, gameInitiator));

  final stopCommand = SlashCommandBuilder("stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É", [])
    ..registerHandler(
        (event) async => await handleStopCommand(event, gameInitiator));

  final helpCommand =
      SlashCommandBuilder("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏–≥—Ä–µ Squarebattle", [])
        ..registerHandler((event) async => await handleHelpCommand(event));

  final sbversionCommand =
      SlashCommandBuilder("sbversion", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", [])
        ..registerHandler((event) async => await handleSbversionCommand(event));

  IInteractions.create(WebsocketInteractionBackend(bot))
    //–∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
    ..registerButtonHandler("rotate_left", buttonHandler)
    ..registerButtonHandler("up", buttonHandler)
    ..registerButtonHandler("rotate_right", buttonHandler)
    ..registerButtonHandler("left", buttonHandler)
    ..registerButtonHandler("shoot", buttonHandler)
    ..registerButtonHandler("right", buttonHandler)
    ..registerButtonHandler("build", buttonHandler)
    ..registerButtonHandler("down", buttonHandler)
    ..registerButtonHandler("heal", buttonHandler)
    ..registerButtonHandler("make_turn", buttonHandler)
    ..registerButtonHandler("cancel", buttonHandler)
    //–∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    ..registerSlashCommand(squarebattleCommand)
    ..registerSlashCommand(startCommand)
    ..registerSlashCommand(skipCommand)
    ..registerSlashCommand(stopCommand)
    ..registerSlashCommand(helpCommand)
    ..registerSlashCommand(sbversionCommand)
    ..syncOnReady();

  bot.eventsWs.onMessageReactionRemove.listen((event) async {
    var msg = event.message;
    var user = await event.user.download();
    if (user.bot) {
      return;
    }
    if (msg != gameInitiator.startMessage) {
      return;
    }
    try {
      onReactionRemove(user, event, gameInitiator.participants, msg);
    } catch (e) {
      print(e);
    }
  });

  bot.eventsWs.onMessageReactionAdded.listen((event) async {
    try {
      var msg = event.message;

      var user = await event.user.download();
      if (user.bot) {
        return;
      }
      if (msg != gameInitiator.startMessage) {
        return;
      }

      var sender = user;
      var emoji = event.emoji;
      if (!state.isStartingGame || state.turnManager.isPlaying) {
        return;
      }
      if (!emojiWhiteList.contains(emoji.formatForMessage())) {
        return;
      }

      if (!gameInitiator.participants.values
          .any((e) => e.toString() == emoji.toString())) {
        gameInitiator.participants[sender] = emoji;

        updateRegistrationMessage(gameInitiator.participants, user, emoji, msg);
      }
    } catch (e) {
      print(e);
    }
  });
}

Future<void> handleSbversionCommand(ISlashCommandInteractionEvent e) async {
  e.respond(MessageBuilder.content(patchnote));
}

Future<void> handleStopCommand(
    ISlashCommandInteractionEvent e, GameInitiator gameInitiator) async {
  final caller = e.interaction;
  if (caller.userAuthor?.id.id != gameInitiator.gameInitiatorId &&
      caller.memberAuthorPermissions?.administrator == false) {
    await e.respond(MessageBuilder.content(
        '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!'));
    return;
  }

  state.resetGame();
  gameInitiator.participants = {};

  await e.respond(MessageBuilder.content('–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!'));
  return;
}

Future<void> handleSkipCommand(
    ISlashCommandInteractionEvent e, GameInitiator gameInitiator) async {
  final caller = e.interaction;

  if (caller.userAuthor?.id.id != gameInitiator.gameInitiatorId &&
      caller.memberAuthorPermissions?.administrator == false) {
    await e.respond(MessageBuilder.content(
        '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!'));
    return;
  }
  state.turnManager.updateCells(true);
  return;
}

Future<void> handleStartCommand(
    ISlashCommandInteractionEvent e, GameInitiator gameInitiator) async {
  final caller = e.interaction;
  final channel = await caller.channel.download();

  if (caller.userAuthor?.id.id != gameInitiator.gameInitiatorId &&
      caller.memberAuthorPermissions?.administrator == false) {
    await e.respond(MessageBuilder.content(
        '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!'));
    return;
  }
  if (!state.isStartingGame) {
    await e.respond(MessageBuilder.content(
        '–ù–∞–ø–∏—à–∏—Ç–µ /squarebattle, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ!'));
    return;
  }
  if (gameInitiator.participants.isEmpty) {
    await e.respond(
        MessageBuilder.content('–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫!'));
    return;
  }

  //—Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
  gameInitiator.participants = await startGame(
      gameInitiator.startMessage, channel, gameInitiator.participants);

  return;
}

Future<void> handleSquarebattleCommand(
    ISlashCommandInteractionEvent e, GameInitiator gameInitiator) async {
  if (state.isStartingGame) {
    await e.respond(MessageBuilder.content('–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!'));
    return;
  }
  if (state.turnManager.isPlaying) {
    await e.respond(MessageBuilder.content('–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç!'));
    return;
  }
  gameInitiator.participants = {};

  //–ø–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤

  final botsArg = e.getArg('-b').value.toString();

  var bots = double.tryParse(botsArg) ?? 0;
  if (bots >= 8) {
    bots = 8;
  }

  await e.acknowledge();

  final caller = e.interaction;
  final channel = await caller.channel.download();

  final msg = await channel.sendMessage(MessageBuilder.content(
      '${caller.userAuthor?.username} –Ω–∞—á–∞–ª –∏–≥—Ä—É! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.'));

  gameInitiator.startMessage = msg;

  gameInitiator.gameInitiatorId = caller.userAuthor?.id.id;

  state.isStartingGame = true;

  // ---- –ë–æ—Ç—ã

  for (var i = 0; i < bots; i++) {
    Future.delayed(const Duration(milliseconds: 666), () {
      addBot(gameInitiator.participants, msg);
    });
    await Future.delayed(const Duration(milliseconds: 666));
  }

  // ----

  await msg.createReaction(UnicodeEmoji('üü•'));
  await Future.delayed(const Duration(milliseconds: 500),
      () => msg.createReaction(UnicodeEmoji('üüß')));
  await Future.delayed(const Duration(milliseconds: 500),
      () => msg.createReaction(UnicodeEmoji('üü®')));
  await Future.delayed(const Duration(milliseconds: 500),
      () => msg.createReaction(UnicodeEmoji('üü©')));
  await Future.delayed(const Duration(milliseconds: 500),
      () => msg.createReaction(UnicodeEmoji('üü¶')));
  await Future.delayed(const Duration(milliseconds: 500),
      () => msg.createReaction(UnicodeEmoji('üü™')));
  await Future.delayed(const Duration(milliseconds: 500),
      () => msg.createReaction(UnicodeEmoji('üü´')));
  await Future.delayed(const Duration(milliseconds: 500),
      () => msg.createReaction(UnicodeEmoji('‚¨ú')));

  //—á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è
  Future.delayed(const Duration(minutes: 2), () {
    if (state.isStartingGame) {
      state.isStartingGame = false;
      state.turnManager.isPlaying = false;
      state.resetGame();
      channel
          .sendMessage(MessageBuilder.content('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É –æ—Ç–º–µ–Ω–µ–Ω–∞!'));
    }
  });
  return;
}

void addBot(Map<IUser, IEmoji> participants, IMessage msg) {
  var emojis = emojiWhiteList.toSet();
  var usedEmojis = participants.values.map((e) => e.formatForMessage()).toSet();
  var remainingColors = emojis.difference(usedEmojis);
  if (remainingColors.isNotEmpty) {
    var color =
        remainingColors.elementAt(Random().nextInt(remainingColors.length));
    var user = BotUser();
    participants.addAll({user: UnicodeEmoji(color)});
    updateRegistrationMessage(participants, user, UnicodeEmoji(color), msg);
  }
}

void updateRegistrationMessage(
    Map<IUser, IEmoji> participants, IUser user, IEmoji emoji, IMessage? msg) {
  var string = '–ù–∞—á–∞–ª–∞—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ SquareBattle!\n\n';

  for (var p in participants.entries) {
    string += '${p.value.formatForMessage()} ${p.key.username}\n';
  }

  string += '–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É';

  state.playerManager.addPlayer(user, getTeamByEmoji(emoji.formatForMessage()));
  state.turnManager.updateCells();

  msg?.edit(MessageBuilder.content(string));
}

void onReactionRemove(IUser user, IMessageReactionEvent event,
    Map<IUser, IEmoji> participants, IMessage? msg) {
  var sender = user;
  var emoji = event.emoji;

  if (participants[sender]?.formatForMessage() == emoji.formatForMessage()) {
    participants.remove(sender);

    state.playerManager.removePlayer(user);
    state.turnManager.updateCells();
  }

  var string = '–ù–∞—á–∞–ª–∞—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ SquareBattle!\n\n';

  for (var p in participants.entries) {
    string += '${p.value.formatForMessage()} ${p.key.username}\n';
  }

  string += '–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É';

  msg?.edit(MessageBuilder.content(string));
}

Future<void> handleHelpCommand(ISlashCommandInteractionEvent e) async {
  await e.respond(MessageBuilder.content('''
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ SquareBattle! –≠—Ç–æ –ø–æ—à–∞–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏ –Ω–∞ —É–º–µ–Ω—å—à–∞—é—â–µ–π—Å—è –∫–∞—Ä—Ç–µ.

–í –∏–≥—Ä–µ –µ—Å—Ç—å 2 —Å–ø–æ—Å–æ–±–∞ –ø–æ–±–µ–¥–∏—Ç—å: 
1) –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤—ã–∂–∏–≤—à–∏–º;
2) –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ—Ö –æ—á–∫–æ–≤ –∫ 50 —Ö–æ–¥—É.

–ö–∞–∂–¥—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –º–æ–Ω–µ—Ç—É –∑–∞ –∫–∞–∂–¥—É—é –∫–ª–µ—Ç–∫—É –µ–≥–æ —Ü–≤–µ—Ç–∞. –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç ‚Äì —ç—Ç–æ —Å—É–º–º–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç, –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–º –∑–∞ –∏–≥—Ä—É.

–î–µ–π—Å—Ç–≤–∏—è:
–ö–∞–∂–¥—ã–π —Ö–æ–¥ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—å—Å—è. –ü–æ–≤–æ—Ä–æ—Ç –≤—Å–µ–≥–¥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–Ω–µ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ).
üí• ‚Äì –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –Ω–∞ 3 –∫–ª–µ—Ç–∫–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ (6 –º–æ–Ω–µ—Ç). –£—Ä–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
üß± ‚Äì –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–µ–Ω—É –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ (5 –º–æ–Ω–µ—Ç). –£ —Å—Ç–µ–Ω—ã 3 –µ–¥–∏–Ω–∏—Ü—ã –∑–¥–æ—Ä–æ–≤—å—è.
‚ù§ ‚Äì –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 1 –µ–¥–∏–Ω–∏—Ü—É –∑–¥–æ—Ä–æ–≤—å—è (10 + 5 –∑–∞ –∫–∞–∂–¥—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –µ–¥–∏–Ω–∏—Ü—É –∑–¥–æ—Ä–æ–≤—å—è).
üö´ ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥.

–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –∏–≥—Ä–µ, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /squarebattle -b [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ—Ç–æ–≤]

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –¥–∏—Å–∫–æ—Ä–¥ https://discord.gg/9Sg3GDzmQg –∏ —é—Ç—É–± https://www.youtube.com/channel/UCvb-2jADopGlMKM96qrfKjw —Å–æ–∑–¥–∞—Ç–µ–ª—è!
'''));
}

Future<Map<IUser, IEmoji>> startGame(IMessage? startMessage,
    ITextChannel channel, Map<IUser, IEmoji> participants) async {
  //—Å–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
  MessageBuilder msg = await createKeyboard();

  //—É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏
  startMessage?.delete();

  //—Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  state.gameMessage = await channel.sendMessage(msg);
  participants = {};

  state.isStartingGame = false;

  state.turnManager.isPlaying = true;
  state.turnManager.initGame();
  return participants;
}

String formatGameMessage() {
  if (state.turnManager.turn >= 50 ||
      state.playerManager.players.where((p) => p.isAlive).isEmpty) {
    var scoreTable = '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: \n';
    var players = List<Player>.from(state.playerManager.players
      ..sort((p1, p2) {
        return p1.totalScore.compareTo(p2.totalScore);
      }));
    for (var player in players) {
      scoreTable += '${player.user.username}: ${player.totalScore} –æ—á–∫–æ–≤ \n';
    }

    return scoreTable;
  }
  if (state.playerManager.players.where((p) => p.isAlive).length == 1) {
    var scoreTable =
        '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${state.playerManager.players.where((p) => p.isAlive).first.user.username}\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: \n';
    var players = List<Player>.from(state.playerManager.players
      ..sort((p1, p2) {
        return p1.totalScore.compareTo(p2.totalScore);
      }));
    for (var player in players) {
      scoreTable += '${player.user.username}: ${player.totalScore} –æ—á–∫–æ–≤ \n';
    }

    return scoreTable;
  }

  var gameMessageString = '–ò–¥–µ—Ç –∏–≥—Ä–∞: —Ö–æ–¥ ${state.turnManager.turn}. ';
  if (state.turnManager.getIteration() < 3) {
    gameMessageString +=
        '–î–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å ${TurnManager.roundLength - state.turnManager.turn % TurnManager.roundLength} —Ö–æ–¥–æ–≤';
  } else {
    gameMessageString +=
        '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${50 - state.turnManager.turn} —Ö–æ–¥–æ–≤';
  }
  if (TurnManager.roundLength -
          state.turnManager.turn % TurnManager.roundLength <=
      5) {
    gameMessageString += '‚ö†';
  }

  gameMessageString += '\n';

  if (state.turnManager.getIteration() > 0) {
    gameMessageString +=
        '–í—Å–µ —Ü–µ–Ω—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ ${state.turnManager.getIteration()}!';
  }
  gameMessageString += '\n';

  for (var player in state.playerManager.players) {
    gameMessageString +=
        '${getEmojiByTeam(player.team)} ${player.user.username} | ';

    gameMessageString += 'ü™ô ${player.money}+${player.countIncome()} | ';

    gameMessageString += '‚ù§ ${player.hp} | ';

    if (!player.isAlive) {
      gameMessageString += 'üíÄ';
    } else if (player.isTurnMade) {
      gameMessageString += '‚úÖ';
    } else {
      gameMessageString += '‚ùå';
    }
    gameMessageString += '\n';
  }

  return gameMessageString;
}

void sendAnimationOfTheGame() async {
  final turn = state.turnManager.turn;
  final directory = await getApplicationDocumentsDirectory();

  final encoder = GifEncoder();
  for (var i = 1; i <= turn; i++) {
    final List<int> bytes =
        await File('${directory.path}/turn$i.png').readAsBytes();

    encoder.addFrame(decodePng(bytes)!, duration: 100);
  }

  final gif = encoder.finish() ?? [];
  final file = await (await File('${directory.path}\\game.gif').create())
      .writeAsBytes(gif);

  final channel = state.gameMessage?.channel;
  await channel?.sendMessage(MessageBuilder.empty()..addFileAttachment(file));
}

Future<void> buttonHandler(IButtonInteractionEvent event) async {
  await event
      .acknowledge(); // ack the interaction so we can send response later

  var user = event.interaction.userAuthor;

  // Send followup to button click with id of button
  // await event.sendFollowup(MessageBuilder.content(
  //     "${event.interaction.userAuthor?.username} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É ${event.interaction.customId}"));

  if (state.playerManager.players.where((p) => p.user == user).isEmpty) {
    return;
  }
  if (!state.turnManager.isPlaying) {
    return;
  }
  var player = state.playerManager.players.where((p) => p.user == user).first;
  var action = event.interaction.customId;

  switch (action) {
    case 'up':
      player.action = player.moveUp;
      break;
    case 'left':
      player.action = player.moveLeft;
      break;
    case 'right':
      player.action = player.moveRight;
      break;
    case 'down':
      player.action = player.moveDown;
      break;
    case 'rotate_left':
      player.rotationAction = player.rotateLeft;
      break;
    case 'rotate_right':
      player.rotationAction = player.rotateRight;
      break;
    case 'make_turn':
      player.makeTurn();
      state.gameMessage?.edit(await createKeyboard(false));
      break;
    case 'build':
      player.action = player.buildWall;
      break;
    case 'shoot':
      player.action = player.shoot;
      break;
    case 'heal':
      player.action = player.heal;
      break;
    case 'cancel':
      player.action = null;
      player.rotationAction = null;
      player.isTurnMade = false;
      state.gameMessage?.edit(await createKeyboard(false));
      break;
    default:
  }
}

void scheduleBotsActions() {
  for (var bot in state.playerManager.players) {
    if (bot.user.bot) {
      if (!bot.isTurnMade) {
        Future.delayed(Duration(milliseconds: Random().nextInt(5000) + 2000),
            () async {
          bot.action = getAction(state, bot);
          bot.rotationAction = getRotationAction(state, bot);

          bot.makeTurn();
          state.gameMessage?.edit(await createKeyboard(false));
        });
      }
    }
  }
}

const List<String> emojiWhiteList = [
  'üü•',
  'üüß',
  'üü®',
  'üü©',
  'üü¶',
  'üü™',
  'üü´',
  '‚¨ú'
];

///–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–µ –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–Ω–µ–Ω–∏—è
Future<MessageBuilder> createKeyboard([bool appendScreenshot = true]) async {
  var rotateLeftButton = ButtonBuilder(
    '',
    'rotate_left',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('‚Ü™');
  var forwardButton = ButtonBuilder(
    '',
    'up',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('üîº');
  var rotateRightButton = ButtonBuilder(
    '',
    'rotate_right',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('‚Ü©');

  var row1 = ComponentRowBuilder()
    ..addComponent(rotateLeftButton)
    ..addComponent(forwardButton)
    ..addComponent(rotateRightButton);

  var leftButton = ButtonBuilder(
    '',
    'left',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('‚óÄ');
  var attackButton = ButtonBuilder(
    '',
    'shoot',
    ButtonStyle.danger,
  )..emoji = UnicodeEmoji('üí•');
  var rightButton = ButtonBuilder(
    '',
    'right',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('‚ñ∂');

  var row2 = ComponentRowBuilder()
    ..addComponent(leftButton)
    ..addComponent(attackButton)
    ..addComponent(rightButton);

  var buildButton = ButtonBuilder(
    '',
    'build',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('üß±');
  var backButton = ButtonBuilder(
    '',
    'down',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('üîΩ');
  var actionButton = ButtonBuilder(
    '',
    'heal',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('‚ù§');

  var row3 = ComponentRowBuilder()
    ..addComponent(buildButton)
    ..addComponent(backButton)
    ..addComponent(actionButton);

  var cancelButton = ButtonBuilder('', 'cancel', ButtonStyle.secondary)
    ..emoji = UnicodeEmoji('üö´');
  var none2Button =
      ButtonBuilder(' ', 'none2', ButtonStyle.secondary, disabled: true);

  var skipButton = ButtonBuilder(
    '',
    'make_turn',
    ButtonStyle.secondary,
  )..emoji = UnicodeEmoji('‚úÖ');

  var skipRow = ComponentRowBuilder()
    ..addComponent(cancelButton)
    ..addComponent(skipButton)
    ..addComponent(none2Button);

  var msg = ComponentMessageBuilder()..content = formatGameMessage();

  if (appendScreenshot) {
    msg.addFileAttachment(await takeScreenshot());
  }

  if (state.turnManager.turn == 50 ||
      state.playerManager.players.where((p) => p.isAlive).isEmpty ||
      state.playerManager.players.where((p) => p.isAlive).length == 1) {
    return msg;
  }

  msg
    ..addComponentRow(row1)
    ..addComponentRow(row2)
    ..addComponentRow(row3)
    ..addComponentRow(skipRow);

  return msg;
}

///–ü–µ—Ä–µ—Å–ª–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–∏–∑
void resendGameMessage() async {
  var channel = state.gameMessage?.channel;

  await state.gameMessage?.delete();
  state.gameMessage = await channel?.sendMessage(await createKeyboard());
}
